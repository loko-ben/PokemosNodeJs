const jwt = require ('jsonwebtoken')
const private_key = require('../auth/private_key')

module.exports = (req,res, next) => {
    //Si l'en-tÃªte Authorization est absent, authorizationHeader sera undefined.
    const authorizationHeader = req.headers.authorization

    //vÃ©rification si la proprietÃ© authorizationHeader n'est pas une valeur "falsy(explication : Si lors de rÃ©cupÃ©ration  )"
    if (!authorizationHeader){
        const message = `Vous n'avez pas fourni de jeton d'authenfication. Ajoutez-en un dans l'en-tÃªte de la requÃªte`
        return res.status(401).json({message})
    }

    // recupÃ©ration tu jeton jwt 
    // voici un exemple de comment se presente l'en-tete authorization qui contient le jetons jwt donc
    //  nous avons besoin:  example => authorization: Bearer  FdE98ADEbdyDBm8u
    // l'idÃ© ici est d'xtraire le jetons jwt de l'en-tete authorization qui est 'FdE98ADEbdyDBm8u' 
    const token= authorizationHeader.split(' ')[1]

    /*
    *jwt.verify() est une mÃ©thode de la bibliothÃ¨que jsonwebtoken qui permet de vÃ©rifier la validitÃ© d'un JWT.
    *token reprÃ©sente le JWT reÃ§u, gÃ©nÃ©ralement transmis dans les headers de la requÃªte.
    *private_key est la clÃ© secrÃ¨te utilisÃ©e pour signer et vÃ©rifier le token.
    *La fonction de callback est exÃ©cutÃ©e une fois la vÃ©rification terminÃ©e.
       Si le token est invalide ou expirÃ©, l'erreur est retournÃ©e (error).
       Sinon, les donnÃ©es contenues dans le token sont stockÃ©es dans decodedToken.
       
    ===================================================================================================================================
    
    ğŸ”¹ Ã‰tape 1 : VÃ©rification du token
       Lorsque jwt.verify(token, private_key, callback) est exÃ©cutÃ© :

     La signature du token est comparÃ©e avec private_key pour s'assurer qu'il n'a pas Ã©tÃ© falsifiÃ©.
     La date d'expiration (exp dans le token) est vÃ©rifiÃ©e.
     Si le token a Ã©tÃ© modifiÃ© ou a expirÃ©, une erreur est gÃ©nÃ©rÃ©e.


     ğŸ”¹ Ã‰tape 2 : ExÃ©cution du callback
        Une fois la vÃ©rification faite, la fonction callback reÃ§oit :

        error â†’ Si le token est invalide ou expirÃ©.
        decodedToken â†’ Un objet contenant les donnÃ©es encodÃ©es dans le JWT, par exemple :
       */


    const decodedToken = jwt.verify(token, private_key, (error, decodedToken) => {
        if(error){
            const message = `L'utilisateur n'est pas autorisÃ© a acceder a cette ressource. ` 
            return res.status(401).json({message, data: error})                   
        }

        const userId = decodedToken.userId
        if(req.body.userId && req.body.userId !== userId){
            const message = `L'identifiant de l'utilisateur est invalide.`
            res.status(401).json({message})
        }else{
            next()
        }
    })
}